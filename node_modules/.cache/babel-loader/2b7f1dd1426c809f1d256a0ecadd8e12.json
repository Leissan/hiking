{"ast":null,"code":"/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return '';\n  } // Node.\n\n\n  if ('position' in value || 'type' in value) {\n    return position(value.position);\n  } // Position.\n\n\n  if ('start' in value || 'end' in value) {\n    return position(value);\n  } // Point.\n\n\n  if ('line' in value || 'column' in value) {\n    return point(value);\n  } // ?\n\n\n  return '';\n}\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\n\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column);\n}\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\n\n\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end);\n}\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\n\n\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1;\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/react-markdown/node_modules/unist-util-stringify-position/lib/index.js"],"names":["stringifyPosition","value","position","point","index","line","column","pos","start","end"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAT,CAA2BC,KAA3B,EAAkC;AACvC;AACA,MAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACvC,WAAO,EAAP;AACD,GAJsC,CAMvC;;;AACA,MAAI,cAAcA,KAAd,IAAuB,UAAUA,KAArC,EAA4C;AAC1C,WAAOC,QAAQ,CAACD,KAAK,CAACC,QAAP,CAAf;AACD,GATsC,CAWvC;;;AACA,MAAI,WAAWD,KAAX,IAAoB,SAASA,KAAjC,EAAwC;AACtC,WAAOC,QAAQ,CAACD,KAAD,CAAf;AACD,GAdsC,CAgBvC;;;AACA,MAAI,UAAUA,KAAV,IAAmB,YAAYA,KAAnC,EAA0C;AACxC,WAAOE,KAAK,CAACF,KAAD,CAAZ;AACD,GAnBsC,CAqBvC;;;AACA,SAAO,EAAP;AACD;AAED;AACA;AACA;AACA;;AACA,SAASE,KAAT,CAAeA,KAAf,EAAsB;AACpB,SAAOC,KAAK,CAACD,KAAK,IAAIA,KAAK,CAACE,IAAhB,CAAL,GAA6B,GAA7B,GAAmCD,KAAK,CAACD,KAAK,IAAIA,KAAK,CAACG,MAAhB,CAA/C;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASJ,QAAT,CAAkBK,GAAlB,EAAuB;AACrB,SAAOJ,KAAK,CAACI,GAAG,IAAIA,GAAG,CAACC,KAAZ,CAAL,GAA0B,GAA1B,GAAgCL,KAAK,CAACI,GAAG,IAAIA,GAAG,CAACE,GAAZ,CAA5C;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASL,KAAT,CAAeH,KAAf,EAAsB;AACpB,SAAOA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,GAAqCA,KAArC,GAA6C,CAApD;AACD","sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n"]},"metadata":{},"sourceType":"module"}