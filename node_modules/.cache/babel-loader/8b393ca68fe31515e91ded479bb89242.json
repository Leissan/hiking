{"ast":null,"code":"/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {};\n  const results = state.all(node);\n  let index = -1;\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start;\n  } // Like GitHub, add a class for custom styling.\n\n\n  while (++index < results.length) {\n    const child = results[index];\n\n    if (child.type === 'element' && child.tagName === 'li' && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes('task-list-item')) {\n      properties.className = ['contains-task-list'];\n      break;\n    }\n  }\n  /** @type {Element} */\n\n\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/mdast-util-to-hast/lib/handlers/list.js"],"names":["list","state","node","properties","results","all","index","start","length","child","type","tagName","Array","isArray","className","includes","result","ordered","children","wrap","patch","applyData"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2B;AAChC;AACA,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,OAAO,GAAGH,KAAK,CAACI,GAAN,CAAUH,IAAV,CAAhB;AACA,MAAII,KAAK,GAAG,CAAC,CAAb;;AAEA,MAAI,OAAOJ,IAAI,CAACK,KAAZ,KAAsB,QAAtB,IAAkCL,IAAI,CAACK,KAAL,KAAe,CAArD,EAAwD;AACtDJ,IAAAA,UAAU,CAACI,KAAX,GAAmBL,IAAI,CAACK,KAAxB;AACD,GAR+B,CAUhC;;;AACA,SAAO,EAAED,KAAF,GAAUF,OAAO,CAACI,MAAzB,EAAiC;AAC/B,UAAMC,KAAK,GAAGL,OAAO,CAACE,KAAD,CAArB;;AAEA,QACEG,KAAK,CAACC,IAAN,KAAe,SAAf,IACAD,KAAK,CAACE,OAAN,KAAkB,IADlB,IAEAF,KAAK,CAACN,UAFN,IAGAS,KAAK,CAACC,OAAN,CAAcJ,KAAK,CAACN,UAAN,CAAiBW,SAA/B,CAHA,IAIAL,KAAK,CAACN,UAAN,CAAiBW,SAAjB,CAA2BC,QAA3B,CAAoC,gBAApC,CALF,EAME;AACAZ,MAAAA,UAAU,CAACW,SAAX,GAAuB,CAAC,oBAAD,CAAvB;AACA;AACD;AACF;AAED;;;AACA,QAAME,MAAM,GAAG;AACbN,IAAAA,IAAI,EAAE,SADO;AAEbC,IAAAA,OAAO,EAAET,IAAI,CAACe,OAAL,GAAe,IAAf,GAAsB,IAFlB;AAGbd,IAAAA,UAHa;AAIbe,IAAAA,QAAQ,EAAEjB,KAAK,CAACkB,IAAN,CAAWf,OAAX,EAAoB,IAApB;AAJG,GAAf;AAMAH,EAAAA,KAAK,CAACmB,KAAN,CAAYlB,IAAZ,EAAkBc,MAAlB;AACA,SAAOf,KAAK,CAACoB,SAAN,CAAgBnB,IAAhB,EAAsBc,MAAtB,CAAP;AACD","sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n"]},"metadata":{},"sourceType":"module"}