{"ast":null,"code":"/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value = // @ts-expect-error looks like a node.\n  thing && typeof thing === 'object' && thing.type === 'text' ? // @ts-expect-error looks like a text.\n  thing.value || '' : thing; // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === '';\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/hast-util-whitespace/index.js"],"names":["whitespace","thing","value","type","replace"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AAChC;AACA,QAAMC,KAAK,GACT;AACAD,EAAAA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsCA,KAAK,CAACE,IAAN,KAAe,MAArD,GACI;AACAF,EAAAA,KAAK,CAACC,KAAN,IAAe,EAFnB,GAGID,KALN,CAFgC,CAShC;AACA;;AACA,SAAO,OAAOC,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACE,OAAN,CAAc,cAAd,EAA8B,EAA9B,MAAsC,EAA1E;AACD","sourcesContent":["/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n"]},"metadata":{},"sourceType":"module"}