{"ast":null,"code":"/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {\n      type: 'raw',\n      value: node.value\n    };\n    state.patch(node, result);\n    return state.applyData(node, result);\n  } // To do: next major: return `undefined`.\n\n\n  return null;\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/mdast-util-to-hast/lib/handlers/html.js"],"names":["html","state","node","dangerous","result","type","value","patch","applyData"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2B;AAChC,MAAID,KAAK,CAACE,SAAV,EAAqB;AACnB;AACA,UAAMC,MAAM,GAAG;AAACC,MAAAA,IAAI,EAAE,KAAP;AAAcC,MAAAA,KAAK,EAAEJ,IAAI,CAACI;AAA1B,KAAf;AACAL,IAAAA,KAAK,CAACM,KAAN,CAAYL,IAAZ,EAAkBE,MAAlB;AACA,WAAOH,KAAK,CAACO,SAAN,CAAgBN,IAAhB,EAAsBE,MAAtB,CAAP;AACD,GAN+B,CAQhC;;;AACA,SAAO,IAAP;AACD","sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}