{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\nimport { toString } from 'mdast-util-to-string';\nimport { parse } from 'micromark/lib/parse.js';\nimport { preprocess } from 'micromark/lib/preprocess.js';\nimport { postprocess } from 'micromark/lib/postprocess.js';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\n\nexport const fromMarkdown =\n/**\n * @type {(\n *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n *   ((value: Value, options?: Options | null | undefined) => Root)\n * )}\n */\n\n/**\n * @param {Value} value\n * @param {Encoding | Options | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n */\nfunction (value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n\n  return compiler(options)(postprocess( // @ts-expect-error: micromark types need to accept `null`.\n  parse(options).document().write(preprocess()(value, encoding, true))));\n};\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\n\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n  /** @type {CompileData} */\n\n  const data = {};\n  return compile;\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    };\n    /** @type {Array<number>} */\n\n    const listStack = [];\n    let index = -1;\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === 'listOrdered' || events[index][1].type === 'listUnordered') {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n\n    index = -1;\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    } // Handle tokens still being open.\n\n\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    } // Figure out `root` position.\n\n\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    }; // Call transforms.\n\n    index = -1;\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n\n    return tree;\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n\n    let listItem;\n    /** @type {number | undefined} */\n\n    let lineIndex;\n    /** @type {number | undefined} */\n\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n\n    let atMarker;\n\n    while (++index <= length) {\n      const event = events[index];\n\n      if (event[1].type === 'listUnordered' || event[1].type === 'listOrdered' || event[1].type === 'blockQuote') {\n        if (event[0] === 'enter') {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n\n        atMarker = undefined;\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n            firstBlankLineIndex = index;\n          }\n\n          atMarker = undefined;\n        }\n      } else if (event[1].type === 'linePrefix' || event[1].type === 'listItemValue' || event[1].type === 'listItemMarker' || event[1].type === 'listItemPrefix' || event[1].type === 'listItemPrefixWhitespace') {// Empty.\n      } else {\n        atMarker = undefined;\n      }\n\n      if (!containerBalance && event[0] === 'enter' && event[1].type === 'listItemPrefix' || containerBalance === -1 && event[0] === 'exit' && (event[1].type === 'listUnordered' || event[1].type === 'listOrdered')) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n\n            if (tailEvent[1].type === 'lineEnding' || tailEvent[1].type === 'lineEndingBlank') {\n              if (tailEvent[0] === 'exit') continue;\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank';\n                listSpread = true;\n              }\n\n              tailEvent[1].type = 'lineEnding';\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === 'linePrefix' || tailEvent[1].type === 'blockQuotePrefix' || tailEvent[1].type === 'blockQuotePrefixWhitespace' || tailEvent[1].type === 'blockQuoteMarker' || tailEvent[1].type === 'listItemIndent') {// Empty\n            } else {\n              break;\n            }\n          }\n\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            // @ts-expect-error Patched.\n            listItem._spread = true;\n          } // Fix position.\n\n\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        } // Create a new list item.\n\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }; // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    } // @ts-expect-error Patched.\n\n\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n\n\n  function setData(key, value) {\n    data[key] = value;\n  }\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n\n\n  function getData(key) {\n    return data[key];\n  }\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n\n\n  function opener(create, and) {\n    return open;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]; // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n\n    parent.children.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]); // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    };\n    return node;\n  }\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n\n\n  function closer(and) {\n    return close;\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n\n    node.position.end = point(token.end);\n    return node;\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n\n  function resume() {\n    return toString(this.stack.pop());\n  } //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true);\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      setData('expectingFirstListItemValue');\n    }\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return;\n    this.buffer();\n    setData('flowCodeInside', true);\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    setData('flowCodeInside');\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true);\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding');\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    let tail = node.children[node.children.length - 1];\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text(); // @ts-expect-error: we’ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      }; // @ts-expect-error: Assume `parent` accepts `text`.\n\n      node.children.push(tail);\n    }\n\n    this.stack.push(tail);\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]; // If we’re at a hard break, include the line ending in there.\n\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      setData('atHardBreak');\n      return;\n    }\n\n    if (!getData('setextHeadingSlurpLineEnding') && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexithardbreak() {\n    setData('atHardBreak', true);\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]; // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut';\n      node.type += 'Reference'; // @ts-expect-error: mutate.\n\n      node.referenceType = referenceType; // @ts-expect-error: mutate.\n\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier; // @ts-expect-error: mutate.\n\n      delete node.label;\n    }\n\n    setData('referenceType');\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]; // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut';\n      node.type += 'Reference'; // @ts-expect-error: mutate.\n\n      node.referenceType = referenceType; // @ts-expect-error: mutate.\n\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier; // @ts-expect-error: mutate.\n\n      delete node.label;\n    }\n\n    setData('referenceType');\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2]; // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n\n    ancestor.label = decodeString(string); // @ts-expect-error: same as above.\n\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1]; // Assume a reference.\n\n    setData('inReference', true);\n\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitresource() {\n    setData('inReference');\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed');\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1]; // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n\n    node.label = label; // @ts-expect-error: same as above.\n\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    setData('referenceType', 'full');\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type);\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = getData('characterReferenceType');\n    /** @type {string} */\n\n    let value;\n\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === 'characterReferenceMarkerNumeric' ? 10 : 16);\n      setData('characterReferenceType');\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n\n    const tail = this.stack.pop();\n    tail.value += value;\n    tail.position.end = point(token.end);\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n  /** @returns {Code} */\n\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n  /** @returns {InlineCode} */\n\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n  /** @returns {Definition} */\n\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n  /** @returns {Emphasis} */\n\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n  /** @returns {Heading} */\n\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    };\n  }\n  /** @returns {Break} */\n\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n  /** @returns {HTML} */\n\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n  /** @returns {Image} */\n\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n  /** @returns {Link} */\n\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    };\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n  /** @returns {Paragraph} */\n\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n  /** @returns {Strong} */\n\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n  /** @returns {Text} */\n\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n  /** @returns {ThematicBreak} */\n\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\n\n\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\n\n\nfunction configure(combined, extensions) {\n  let index = -1;\n\n  while (++index < extensions.length) {\n    const value = extensions[index];\n\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\n\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key];\n\n        if (right) {\n          combined[key].push(...right);\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key];\n\n        if (right) {\n          combined[key].push(...right);\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key];\n\n        if (right) {\n          Object.assign(combined[key], right);\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/mdast-util-from-markdown/lib/index.js"],"names":["toString","parse","preprocess","postprocess","decodeNumericCharacterReference","decodeString","normalizeIdentifier","decodeNamedCharacterReference","stringifyPosition","own","hasOwnProperty","fromMarkdown","value","encoding","options","undefined","compiler","document","write","config","transforms","canContainEols","enter","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","heading","blockQuote","characterEscape","characterReference","codeFenced","codeFlow","codeFencedFenceInfo","buffer","codeFencedFenceMeta","codeIndented","codeText","codeTextData","data","codeFlowValue","definition","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","label","listItem","listItemValue","onenterlistitemvalue","listOrdered","list","onenterlistordered","listUnordered","paragraph","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","thematicBreak","exit","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","lineEnding","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","events","tree","type","children","context","stack","tokenStack","resume","setData","getData","listStack","index","length","push","tail","pop","prepareList","handler","call","Object","assign","sliceSerialize","defaultOnError","position","start","point","line","column","offset","end","containerBalance","listSpread","lineIndex","firstBlankLineIndex","atMarker","event","tailIndex","tailEvent","_spread","splice","key","create","and","open","token","node","errorHandler","parent","close","onExitError","Error","ancestor","Number","parseInt","lang","meta","replace","identifier","toLowerCase","title","url","depth","charCodeAt","text","includes","referenceType","string","fragment","alt","result","ordered","spread","checked","d","combined","extensions","Array","isArray","extension","right","left"],"mappingsuB,sBAAvB;AACA,SAAQC,KAAR,QAAoB,wBAApB;AACA,SAAQC,UAAR,QAAyB,6BAAzB;AACA,SAAQC,WAAR,QAA0B,8BAA1B;AACA,SAAQC,+BAAR,QAA8C,mDAA9C;AACA,SAAQC,YAAR,QAA2B,8BAA3B;AACA,SAAQC,mBAAR,QAAkC,qCAAlC;AACA,SAAQC,6BAAR,QAA4C,kCAA5C;AACA,SAAQC,iBAAR,QAAgC,+BAAhC;AACA,MAAMC,GAAG,GAAG,GAAGC,cAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY;AACvB;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;AACA;AACA;AACA;AACE,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoC;AAClC,MAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAChCC,IAAAA,OAAO,GAAGD,QAAV;AACAA,IAAAA,QAAQ,GAAGE,SAAX;AACD;;AACD,SAAOC,QAAQ,CAACF,OAAD,CAAR,CACLX,WAAW,EACT;AACAF,EAAAA,KAAK,CAACa,OAAD,CAAL,CAAeG,QAAf,GAA0BC,KAA1B,CAAgChB,UAAU,GAAGU,KAAH,EAAUC,QAAV,EAAoB,IAApB,CAA1C,CAFS,CADN,CAAP;AAMD,CAzBI;AA2BP;AACA;AACA;AACA;AACA;;AACA,SAASG,QAAT,CAAkBF,OAAlB,EAA2B;AACzB;AACA,QAAMK,MAAM,GAAG;AACbC,IAAAA,UAAU,EAAE,EADC;AAEbC,IAAAA,cAAc,EAAE,CAAC,UAAD,EAAa,UAAb,EAAyB,SAAzB,EAAoC,WAApC,EAAiD,QAAjD,CAFH;AAGbC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAEC,MAAM,CAACC,IAAD,CADX;AAELC,MAAAA,gBAAgB,EAAEC,WAFb;AAGLC,MAAAA,aAAa,EAAED,WAHV;AAILE,MAAAA,UAAU,EAAEL,MAAM,CAACM,OAAD,CAJb;AAKLC,MAAAA,UAAU,EAAEP,MAAM,CAACO,UAAD,CALb;AAMLC,MAAAA,eAAe,EAAEL,WANZ;AAOLM,MAAAA,kBAAkB,EAAEN,WAPf;AAQLO,MAAAA,UAAU,EAAEV,MAAM,CAACW,QAAD,CARb;AASLC,MAAAA,mBAAmB,EAAEC,MAThB;AAULC,MAAAA,mBAAmB,EAAED,MAVhB;AAWLE,MAAAA,YAAY,EAAEf,MAAM,CAACW,QAAD,EAAWE,MAAX,CAXf;AAYLG,MAAAA,QAAQ,EAAEhB,MAAM,CAACgB,QAAD,EAAWH,MAAX,CAZX;AAaLI,MAAAA,YAAY,EAAEd,WAbT;AAcLe,MAAAA,IAAI,EAAEf,WAdD;AAeLgB,MAAAA,aAAa,EAAEhB,WAfV;AAgBLiB,MAAAA,UAAU,EAAEpB,MAAM,CAACoB,UAAD,CAhBb;AAiBLC,MAAAA,2BAA2B,EAAER,MAjBxB;AAkBLS,MAAAA,qBAAqB,EAAET,MAlBlB;AAmBLU,MAAAA,qBAAqB,EAAEV,MAnBlB;AAoBLW,MAAAA,QAAQ,EAAExB,MAAM,CAACwB,QAAD,CApBX;AAqBLC,MAAAA,eAAe,EAAEzB,MAAM,CAAC0B,SAAD,CArBlB;AAsBLC,MAAAA,iBAAiB,EAAE3B,MAAM,CAAC0B,SAAD,CAtBpB;AAuBLE,MAAAA,QAAQ,EAAE5B,MAAM,CAAC6B,IAAD,EAAOhB,MAAP,CAvBX;AAwBLiB,MAAAA,YAAY,EAAE3B,WAxBT;AAyBL4B,MAAAA,QAAQ,EAAE/B,MAAM,CAAC6B,IAAD,EAAOhB,MAAP,CAzBX;AA0BLmB,MAAAA,YAAY,EAAE7B,WA1BT;AA2BL8B,MAAAA,KAAK,EAAEjC,MAAM,CAACiC,KAAD,CA3BR;AA4BLC,MAAAA,KAAK,EAAErB,MA5BF;AA6BLZ,MAAAA,IAAI,EAAED,MAAM,CAACC,IAAD,CA7BP;AA8BLkC,MAAAA,QAAQ,EAAEnC,MAAM,CAACmC,QAAD,CA9BX;AA+BLC,MAAAA,aAAa,EAAEC,oBA/BV;AAgCLC,MAAAA,WAAW,EAAEtC,MAAM,CAACuC,IAAD,EAAOC,kBAAP,CAhCd;AAiCLC,MAAAA,aAAa,EAAEzC,MAAM,CAACuC,IAAD,CAjChB;AAkCLG,MAAAA,SAAS,EAAE1C,MAAM,CAAC0C,SAAD,CAlCZ;AAmCLC,MAAAA,SAAS,EAAEC,gBAnCN;AAoCLC,MAAAA,eAAe,EAAEhC,MApCZ;AAqCLiC,MAAAA,yBAAyB,EAAEjC,MArCtB;AAsCLkC,MAAAA,mBAAmB,EAAElC,MAtChB;AAuCLmC,MAAAA,aAAa,EAAEhD,MAAM,CAACM,OAAD,CAvChB;AAwCL2C,MAAAA,MAAM,EAAEjD,MAAM,CAACiD,MAAD,CAxCT;AAyCLC,MAAAA,aAAa,EAAElD,MAAM,CAACkD,aAAD;AAzChB,KAHM;AA8CbC,IAAAA,IAAI,EAAE;AACJ9C,MAAAA,UAAU,EAAE+C,MAAM,EADd;AAEJC,MAAAA,kBAAkB,EAAEC,wBAFhB;AAGJvD,MAAAA,QAAQ,EAAEqD,MAAM,EAHZ;AAIJhD,MAAAA,aAAa,EAAEmD,mBAJX;AAKJrD,MAAAA,gBAAgB,EAAEsD,sBALd;AAMJjD,MAAAA,UAAU,EAAE6C,MAAM,EANd;AAOJK,MAAAA,oBAAoB,EAAEC,UAPlB;AAQJC,MAAAA,mCAAmC,EAAEC,8BARjC;AASJC,MAAAA,+BAA+B,EAAED,8BAT7B;AAUJE,MAAAA,uBAAuB,EAAEC,6BAVrB;AAWJrD,MAAAA,UAAU,EAAE0C,MAAM,CAACY,gBAAD,CAXd;AAYJC,MAAAA,eAAe,EAAEC,qBAZb;AAaJtD,MAAAA,mBAAmB,EAAEuD,yBAbjB;AAcJrD,MAAAA,mBAAmB,EAAEsD,yBAdjB;AAeJjD,MAAAA,aAAa,EAAEuC,UAfX;AAgBJ3C,MAAAA,YAAY,EAAEqC,MAAM,CAACiB,kBAAD,CAhBhB;AAiBJrD,MAAAA,QAAQ,EAAEoC,MAAM,CAACkB,cAAD,CAjBZ;AAkBJrD,MAAAA,YAAY,EAAEyC,UAlBV;AAmBJxC,MAAAA,IAAI,EAAEwC,UAnBF;AAoBJtC,MAAAA,UAAU,EAAEgC,MAAM,EApBd;AAqBJ/B,MAAAA,2BAA2B,EAAEkD,iCArBzB;AAsBJjD,MAAAA,qBAAqB,EAAEkD,2BAtBnB;AAuBJjD,MAAAA,qBAAqB,EAAEkD,2BAvBnB;AAwBJjD,MAAAA,QAAQ,EAAE4B,MAAM,EAxBZ;AAyBJ3B,MAAAA,eAAe,EAAE2B,MAAM,CAACsB,eAAD,CAzBnB;AA0BJ/C,MAAAA,iBAAiB,EAAEyB,MAAM,CAACsB,eAAD,CA1BrB;AA2BJ9C,MAAAA,QAAQ,EAAEwB,MAAM,CAACuB,cAAD,CA3BZ;AA4BJ7C,MAAAA,YAAY,EAAE4B,UA5BV;AA6BJ3B,MAAAA,QAAQ,EAAEqB,MAAM,CAACwB,cAAD,CA7BZ;AA8BJ5C,MAAAA,YAAY,EAAE0B,UA9BV;AA+BJzB,MAAAA,KAAK,EAAEmB,MAAM,CAACyB,WAAD,CA/BT;AAgCJ3C,MAAAA,KAAK,EAAE4C,WAhCH;AAiCJC,MAAAA,SAAS,EAAEC,eAjCP;AAkCJC,MAAAA,UAAU,EAAEC,gBAlCR;AAmCJjF,MAAAA,IAAI,EAAEmD,MAAM,CAAC+B,UAAD,CAnCR;AAoCJhD,MAAAA,QAAQ,EAAEiB,MAAM,EApCZ;AAqCJd,MAAAA,WAAW,EAAEc,MAAM,EArCf;AAsCJX,MAAAA,aAAa,EAAEW,MAAM,EAtCjB;AAuCJV,MAAAA,SAAS,EAAEU,MAAM,EAvCb;AAwCJP,MAAAA,eAAe,EAAEuC,qBAxCb;AAyCJtC,MAAAA,yBAAyB,EAAEuC,+BAzCvB;AA0CJtC,MAAAA,mBAAmB,EAAEuC,yBA1CjB;AA2CJC,MAAAA,QAAQ,EAAEC,cA3CN;AA4CJxC,MAAAA,aAAa,EAAEI,MAAM,CAACqC,mBAAD,CA5CjB;AA6CJC,MAAAA,yBAAyB,EAAEC,+BA7CvB;AA8CJC,MAAAA,iBAAiB,EAAEC,uBA9Cf;AA+CJ5C,MAAAA,MAAM,EAAEG,MAAM,EA/CV;AAgDJF,MAAAA,aAAa,EAAEE,MAAM;AAhDjB;AA9CO,GAAf;AAiGA0C,EAAAA,SAAS,CAACnG,MAAD,EAAS,CAACL,OAAO,IAAI,EAAZ,EAAgByG,eAAhB,IAAmC,EAA5C,CAAT;AAEA;;AACA,QAAM7E,IAAI,GAAG,EAAb;AACA,SAAO8E,OAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASA,OAAT,CAAiBC,MAAjB,EAAyB;AACvB;AACA,QAAIC,IAAI,GAAG;AACTC,MAAAA,IAAI,EAAE,MADG;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAX;AAIA;;AACA,UAAMC,OAAO,GAAG;AACdC,MAAAA,KAAK,EAAE,CAACJ,IAAD,CADO;AAEdK,MAAAA,UAAU,EAAE,EAFE;AAGd5G,MAAAA,MAHc;AAIdG,MAAAA,KAJc;AAKdqD,MAAAA,IALc;AAMdtC,MAAAA,MANc;AAOd2F,MAAAA,MAPc;AAQdC,MAAAA,OARc;AASdC,MAAAA;AATc,KAAhB;AAWA;;AACA,UAAMC,SAAS,GAAG,EAAlB;AACA,QAAIC,KAAK,GAAG,CAAC,CAAb;;AACA,WAAO,EAAEA,KAAF,GAAUX,MAAM,CAACY,MAAxB,EAAgC;AAC9B;AACA;AACA,UACEZ,MAAM,CAACW,KAAD,CAAN,CAAc,CAAd,EAAiBT,IAAjB,KAA0B,aAA1B,IACAF,MAAM,CAACW,KAAD,CAAN,CAAc,CAAd,EAAiBT,IAAjB,KAA0B,eAF5B,EAGE;AACA,YAAIF,MAAM,CAACW,KAAD,CAAN,CAAc,CAAd,MAAqB,OAAzB,EAAkC;AAChCD,UAAAA,SAAS,CAACG,IAAV,CAAeF,KAAf;AACD,SAFD,MAEO;AACL,gBAAMG,IAAI,GAAGJ,SAAS,CAACK,GAAV,EAAb;AACAJ,UAAAA,KAAK,GAAGK,WAAW,CAAChB,MAAD,EAASc,IAAT,EAAeH,KAAf,CAAnB;AACD;AACF;AACF;;AACDA,IAAAA,KAAK,GAAG,CAAC,CAAT;;AACA,WAAO,EAAEA,KAAF,GAAUX,MAAM,CAACY,MAAxB,EAAgC;AAC9B,YAAMK,OAAO,GAAGvH,MAAM,CAACsG,MAAM,CAACW,KAAD,CAAN,CAAc,CAAd,CAAD,CAAtB;;AACA,UAAI3H,GAAG,CAACkI,IAAJ,CAASD,OAAT,EAAkBjB,MAAM,CAACW,KAAD,CAAN,CAAc,CAAd,EAAiBT,IAAnC,CAAJ,EAA8C;AAC5Ce,QAAAA,OAAO,CAACjB,MAAM,CAACW,KAAD,CAAN,CAAc,CAAd,EAAiBT,IAAlB,CAAP,CAA+BgB,IAA/B,CACEC,MAAM,CAACC,MAAP,CACE;AACEC,UAAAA,cAAc,EAAErB,MAAM,CAACW,KAAD,CAAN,CAAc,CAAd,EAAiBU;AADnC,SADF,EAIEjB,OAJF,CADF,EAOEJ,MAAM,CAACW,KAAD,CAAN,CAAc,CAAd,CAPF;AASD;AACF,KAlDsB,CAoDvB;;;AACA,QAAIP,OAAO,CAACE,UAAR,CAAmBM,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,YAAME,IAAI,GAAGV,OAAO,CAACE,UAAR,CAAmBF,OAAO,CAACE,UAAR,CAAmBM,MAAnB,GAA4B,CAA/C,CAAb;AACA,YAAMK,OAAO,GAAGH,IAAI,CAAC,CAAD,CAAJ,IAAWQ,cAA3B;AACAL,MAAAA,OAAO,CAACC,IAAR,CAAad,OAAb,EAAsB9G,SAAtB,EAAiCwH,IAAI,CAAC,CAAD,CAArC;AACD,KAzDsB,CA2DvB;;;AACAb,IAAAA,IAAI,CAACsB,QAAL,GAAgB;AACdC,MAAAA,KAAK,EAAEC,KAAK,CACVzB,MAAM,CAACY,MAAP,GAAgB,CAAhB,GACIZ,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,EAAawB,KADjB,GAEI;AACEE,QAAAA,IAAI,EAAE,CADR;AAEEC,QAAAA,MAAM,EAAE,CAFV;AAGEC,QAAAA,MAAM,EAAE;AAHV,OAHM,CADE;AAUdC,MAAAA,GAAG,EAAEJ,KAAK,CACRzB,MAAM,CAACY,MAAP,GAAgB,CAAhB,GACIZ,MAAM,CAACA,MAAM,CAACY,MAAP,GAAgB,CAAjB,CAAN,CAA0B,CAA1B,EAA6BiB,GADjC,GAEI;AACEH,QAAAA,IAAI,EAAE,CADR;AAEEC,QAAAA,MAAM,EAAE,CAFV;AAGEC,QAAAA,MAAM,EAAE;AAHV,OAHI;AAVI,KAAhB,CA5DuB,CAiFvB;;AACAjB,IAAAA,KAAK,GAAG,CAAC,CAAT;;AACA,WAAO,EAAEA,KAAF,GAAUjH,MAAM,CAACC,UAAP,CAAkBiH,MAAnC,EAA2C;AACzCX,MAAAA,IAAI,GAAGvG,MAAM,CAACC,UAAP,CAAkBgH,KAAlB,EAAyBV,IAAzB,KAAkCA,IAAzC;AACD;;AACD,WAAOA,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASe,WAAT,CAAqBhB,MAArB,EAA6BwB,KAA7B,EAAoCZ,MAApC,EAA4C;AAC1C,QAAID,KAAK,GAAGa,KAAK,GAAG,CAApB;AACA,QAAIM,gBAAgB,GAAG,CAAC,CAAxB;AACA,QAAIC,UAAU,GAAG,KAAjB;AACA;;AACA,QAAI7F,QAAJ;AACA;;AACA,QAAI8F,SAAJ;AACA;;AACA,QAAIC,mBAAJ;AACA;;AACA,QAAIC,QAAJ;;AACA,WAAO,EAAEvB,KAAF,IAAWC,MAAlB,EAA0B;AACxB,YAAMuB,KAAK,GAAGnC,MAAM,CAACW,KAAD,CAApB;;AACA,UACEwB,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,eAAlB,IACAiC,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,aADlB,IAEAiC,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,YAHpB,EAIE;AACA,YAAIiC,KAAK,CAAC,CAAD,CAAL,KAAa,OAAjB,EAA0B;AACxBL,UAAAA,gBAAgB;AACjB,SAFD,MAEO;AACLA,UAAAA,gBAAgB;AACjB;;AACDI,QAAAA,QAAQ,GAAG5I,SAAX;AACD,OAXD,MAWO,IAAI6I,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,iBAAtB,EAAyC;AAC9C,YAAIiC,KAAK,CAAC,CAAD,CAAL,KAAa,OAAjB,EAA0B;AACxB,cACEjG,QAAQ,IACR,CAACgG,QADD,IAEA,CAACJ,gBAFD,IAGA,CAACG,mBAJH,EAKE;AACAA,YAAAA,mBAAmB,GAAGtB,KAAtB;AACD;;AACDuB,UAAAA,QAAQ,GAAG5I,SAAX;AACD;AACF,OAZM,MAYA,IACL6I,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,YAAlB,IACAiC,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,eADlB,IAEAiC,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,gBAFlB,IAGAiC,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,gBAHlB,IAIAiC,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,0BALb,EAML,CACA;AACD,OARM,MAQA;AACLgC,QAAAA,QAAQ,GAAG5I,SAAX;AACD;;AACD,UACG,CAACwI,gBAAD,IACCK,KAAK,CAAC,CAAD,CAAL,KAAa,OADd,IAECA,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,gBAFpB,IAGC4B,gBAAgB,KAAK,CAAC,CAAtB,IACCK,KAAK,CAAC,CAAD,CAAL,KAAa,MADd,KAEEA,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,eAAlB,IACCiC,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,aAHrB,CAJH,EAQE;AACA,YAAIhE,QAAJ,EAAc;AACZ,cAAIkG,SAAS,GAAGzB,KAAhB;AACAqB,UAAAA,SAAS,GAAG1I,SAAZ;;AACA,iBAAO8I,SAAS,EAAhB,EAAoB;AAClB,kBAAMC,SAAS,GAAGrC,MAAM,CAACoC,SAAD,CAAxB;;AACA,gBACEC,SAAS,CAAC,CAAD,CAAT,CAAanC,IAAb,KAAsB,YAAtB,IACAmC,SAAS,CAAC,CAAD,CAAT,CAAanC,IAAb,KAAsB,iBAFxB,EAGE;AACA,kBAAImC,SAAS,CAAC,CAAD,CAAT,KAAiB,MAArB,EAA6B;;AAC7B,kBAAIL,SAAJ,EAAe;AACbhC,gBAAAA,MAAM,CAACgC,SAAD,CAAN,CAAkB,CAAlB,EAAqB9B,IAArB,GAA4B,iBAA5B;AACA6B,gBAAAA,UAAU,GAAG,IAAb;AACD;;AACDM,cAAAA,SAAS,CAAC,CAAD,CAAT,CAAanC,IAAb,GAAoB,YAApB;AACA8B,cAAAA,SAAS,GAAGI,SAAZ;AACD,aAXD,MAWO,IACLC,SAAS,CAAC,CAAD,CAAT,CAAanC,IAAb,KAAsB,YAAtB,IACAmC,SAAS,CAAC,CAAD,CAAT,CAAanC,IAAb,KAAsB,kBADtB,IAEAmC,SAAS,CAAC,CAAD,CAAT,CAAanC,IAAb,KAAsB,4BAFtB,IAGAmC,SAAS,CAAC,CAAD,CAAT,CAAanC,IAAb,KAAsB,kBAHtB,IAIAmC,SAAS,CAAC,CAAD,CAAT,CAAanC,IAAb,KAAsB,gBALjB,EAML,CACA;AACD,aARM,MAQA;AACL;AACD;AACF;;AACD,cACE+B,mBAAmB,KAClB,CAACD,SAAD,IAAcC,mBAAmB,GAAGD,SADlB,CADrB,EAGE;AACA;AACA9F,YAAAA,QAAQ,CAACoG,OAAT,GAAmB,IAAnB;AACD,WAlCW,CAoCZ;;;AACApG,UAAAA,QAAQ,CAAC2F,GAAT,GAAeV,MAAM,CAACC,MAAP,CACb,EADa,EAEbY,SAAS,GAAGhC,MAAM,CAACgC,SAAD,CAAN,CAAkB,CAAlB,EAAqBR,KAAxB,GAAgCW,KAAK,CAAC,CAAD,CAAL,CAASN,GAFrC,CAAf;AAIA7B,UAAAA,MAAM,CAACuC,MAAP,CAAcP,SAAS,IAAIrB,KAA3B,EAAkC,CAAlC,EAAqC,CAAC,MAAD,EAASzE,QAAT,EAAmBiG,KAAK,CAAC,CAAD,CAAxB,CAArC;AACAxB,UAAAA,KAAK;AACLC,UAAAA,MAAM;AACP,SA7CD,CA+CA;;;AACA,YAAIuB,KAAK,CAAC,CAAD,CAAL,CAASjC,IAAT,KAAkB,gBAAtB,EAAwC;AACtChE,UAAAA,QAAQ,GAAG;AACTgE,YAAAA,IAAI,EAAE,UADG;AAET;AACAoC,YAAAA,OAAO,EAAE,KAHA;AAITd,YAAAA,KAAK,EAAEL,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBe,KAAK,CAAC,CAAD,CAAL,CAASX,KAA3B;AAJE,WAAX,CADsC,CAOtC;;AACAxB,UAAAA,MAAM,CAACuC,MAAP,CAAc5B,KAAd,EAAqB,CAArB,EAAwB,CAAC,OAAD,EAAUzE,QAAV,EAAoBiG,KAAK,CAAC,CAAD,CAAzB,CAAxB;AACAxB,UAAAA,KAAK;AACLC,UAAAA,MAAM;AACNqB,UAAAA,mBAAmB,GAAG3I,SAAtB;AACA4I,UAAAA,QAAQ,GAAG,IAAX;AACD;AACF;AACF,KAvHyC,CAyH1C;;;AACAlC,IAAAA,MAAM,CAACwB,KAAD,CAAN,CAAc,CAAd,EAAiBc,OAAjB,GAA2BP,UAA3B;AACA,WAAOnB,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASJ,OAAT,CAAiBgC,GAAjB,EAAsBrJ,KAAtB,EAA6B;AAC3B8B,IAAAA,IAAI,CAACuH,GAAD,CAAJ,GAAYrJ,KAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASsH,OAAT,CAAiB+B,GAAjB,EAAsB;AACpB,WAAOvH,IAAI,CAACuH,GAAD,CAAX;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASzI,MAAT,CAAgB0I,MAAhB,EAAwBC,GAAxB,EAA6B;AAC3B,WAAOC,IAAP;AAEA;AACJ;AACA;AACA;AACA;;AACI,aAASA,IAAT,CAAcC,KAAd,EAAqB;AACnB/I,MAAAA,KAAK,CAACqH,IAAN,CAAW,IAAX,EAAiBuB,MAAM,CAACG,KAAD,CAAvB,EAAgCA,KAAhC;AACA,UAAIF,GAAJ,EAASA,GAAG,CAACxB,IAAJ,CAAS,IAAT,EAAe0B,KAAf;AACV;AACF;AAED;AACF;AACA;AACA;;;AACE,WAAShI,MAAT,GAAkB;AAChB,SAAKyF,KAAL,CAAWQ,IAAX,CAAgB;AACdX,MAAAA,IAAI,EAAE,UADQ;AAEdC,MAAAA,QAAQ,EAAE;AAFI,KAAhB;AAID;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAAStG,KAAT,CAAegJ,IAAf,EAAqBD,KAArB,EAA4BE,YAA5B,EAA0C;AACxC,UAAMC,MAAM,GAAG,KAAK1C,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAf,CADwC,CAExC;;AACAmC,IAAAA,MAAM,CAAC5C,QAAP,CAAgBU,IAAhB,CAAqBgC,IAArB;AACA,SAAKxC,KAAL,CAAWQ,IAAX,CAAgBgC,IAAhB;AACA,SAAKvC,UAAL,CAAgBO,IAAhB,CAAqB,CAAC+B,KAAD,EAAQE,YAAR,CAArB,EALwC,CAMxC;;AACAD,IAAAA,IAAI,CAACtB,QAAL,GAAgB;AACdC,MAAAA,KAAK,EAAEC,KAAK,CAACmB,KAAK,CAACpB,KAAP;AADE,KAAhB;AAGA,WAAOqB,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAAS1F,MAAT,CAAgBuF,GAAhB,EAAqB;AACnB,WAAOM,KAAP;AAEA;AACJ;AACA;AACA;AACA;;AACI,aAASA,KAAT,CAAeJ,KAAf,EAAsB;AACpB,UAAIF,GAAJ,EAASA,GAAG,CAACxB,IAAJ,CAAS,IAAT,EAAe0B,KAAf;AACT1F,MAAAA,IAAI,CAACgE,IAAL,CAAU,IAAV,EAAgB0B,KAAhB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAAS1F,IAAT,CAAc0F,KAAd,EAAqBK,WAArB,EAAkC;AAChC,UAAMJ,IAAI,GAAG,KAAKxC,KAAL,CAAWU,GAAX,EAAb;AACA,UAAM4B,IAAI,GAAG,KAAKrC,UAAL,CAAgBS,GAAhB,EAAb;;AACA,QAAI,CAAC4B,IAAL,EAAW;AACT,YAAM,IAAIO,KAAJ,CACJ,mBACEN,KAAK,CAAC1C,IADR,GAEE,KAFF,GAGEnH,iBAAiB,CAAC;AAChByI,QAAAA,KAAK,EAAEoB,KAAK,CAACpB,KADG;AAEhBK,QAAAA,GAAG,EAAEe,KAAK,CAACf;AAFK,OAAD,CAHnB,GAOE,kBARE,CAAN;AAUD,KAXD,MAWO,IAAIc,IAAI,CAAC,CAAD,CAAJ,CAAQzC,IAAR,KAAiB0C,KAAK,CAAC1C,IAA3B,EAAiC;AACtC,UAAI+C,WAAJ,EAAiB;AACfA,QAAAA,WAAW,CAAC/B,IAAZ,CAAiB,IAAjB,EAAuB0B,KAAvB,EAA8BD,IAAI,CAAC,CAAD,CAAlC;AACD,OAFD,MAEO;AACL,cAAM1B,OAAO,GAAG0B,IAAI,CAAC,CAAD,CAAJ,IAAWrB,cAA3B;AACAL,QAAAA,OAAO,CAACC,IAAR,CAAa,IAAb,EAAmB0B,KAAnB,EAA0BD,IAAI,CAAC,CAAD,CAA9B;AACD;AACF;;AACDE,IAAAA,IAAI,CAACtB,QAAL,CAAcM,GAAd,GAAoBJ,KAAK,CAACmB,KAAK,CAACf,GAAP,CAAzB;AACA,WAAOgB,IAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,WAAStC,MAAT,GAAkB;AAChB,WAAOhI,QAAQ,CAAC,KAAK8H,KAAL,CAAWU,GAAX,EAAD,CAAf;AACD,GA1ewB,CA4ezB;AACA;AACA;;AAEA;AACF;AACA;AACA;;;AACE,WAASxE,kBAAT,GAA8B;AAC5BiE,IAAAA,OAAO,CAAC,6BAAD,EAAgC,IAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASpE,oBAAT,CAA8BwG,KAA9B,EAAqC;AACnC,QAAInC,OAAO,CAAC,6BAAD,CAAX,EAA4C;AAC1C,YAAM0C,QAAQ,GAAG,KAAK9C,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAjB;AACAuC,MAAAA,QAAQ,CAAC3B,KAAT,GAAiB4B,MAAM,CAACC,QAAP,CAAgB,KAAKhC,cAAL,CAAoBuB,KAApB,CAAhB,EAA4C,EAA5C,CAAjB;AACApC,MAAAA,OAAO,CAAC,6BAAD,CAAP;AACD;AACF;AAED;AACF;AACA;AACA;;;AACE,WAAStC,yBAAT,GAAqC;AACnC,UAAMjD,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAACS,IAAL,GAAYrI,IAAZ;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASkD,yBAAT,GAAqC;AACnC,UAAMlD,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAACU,IAAL,GAAYtI,IAAZ;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASgD,qBAAT,GAAiC;AAC/B;AACA,QAAIwC,OAAO,CAAC,gBAAD,CAAX,EAA+B;AAC/B,SAAK7F,MAAL;AACA4F,IAAAA,OAAO,CAAC,gBAAD,EAAmB,IAAnB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASzC,gBAAT,GAA4B;AAC1B,UAAM9C,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAAC1J,KAAL,GAAa8B,IAAI,CAACuI,OAAL,CAAa,0BAAb,EAAyC,EAAzC,CAAb;AACAhD,IAAAA,OAAO,CAAC,gBAAD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASpC,kBAAT,GAA8B;AAC5B,UAAMnD,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAAC1J,KAAL,GAAa8B,IAAI,CAACuI,OAAL,CAAa,cAAb,EAA6B,EAA7B,CAAb;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASjF,2BAAT,CAAqCqE,KAArC,EAA4C;AAC1C,UAAM3G,KAAK,GAAG,KAAKsE,MAAL,EAAd;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAAC5G,KAAL,GAAaA,KAAb;AACA4G,IAAAA,IAAI,CAACY,UAAL,GAAkB5K,mBAAmB,CACnC,KAAKwI,cAAL,CAAoBuB,KAApB,CADmC,CAAnB,CAEhBc,WAFgB,EAAlB;AAGD;AAED;AACF;AACA;AACA;;;AACE,WAASlF,2BAAT,GAAuC;AACrC,UAAMvD,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAACc,KAAL,GAAa1I,IAAb;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASqD,iCAAT,GAA6C;AAC3C,UAAMrD,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAACe,GAAL,GAAW3I,IAAX;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASoC,wBAAT,CAAkCuF,KAAlC,EAAyC;AACvC,UAAMC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;;AACA,QAAI,CAACiC,IAAI,CAACgB,KAAV,EAAiB;AACf,YAAMA,KAAK,GAAG,KAAKxC,cAAL,CAAoBuB,KAApB,EAA2BhC,MAAzC;AACAiC,MAAAA,IAAI,CAACgB,KAAL,GAAaA,KAAb;AACD;AACF;AAED;AACF;AACA;AACA;;;AACE,WAASjE,uBAAT,GAAmC;AACjCY,IAAAA,OAAO,CAAC,8BAAD,EAAiC,IAAjC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASd,+BAAT,CAAyCkD,KAAzC,EAAgD;AAC9C,UAAMC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAACgB,KAAL,GAAa,KAAKxC,cAAL,CAAoBuB,KAApB,EAA2BkB,UAA3B,CAAsC,CAAtC,MAA6C,EAA7C,GAAkD,CAAlD,GAAsD,CAAnE;AACD;AAED;AACF;AACA;AACA;;;AACE,WAAStE,mBAAT,GAA+B;AAC7BgB,IAAAA,OAAO,CAAC,8BAAD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAAStG,WAAT,CAAqB0I,KAArB,EAA4B;AAC1B,UAAMC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACA,QAAIE,IAAI,GAAG+B,IAAI,CAAC1C,QAAL,CAAc0C,IAAI,CAAC1C,QAAL,CAAcS,MAAd,GAAuB,CAArC,CAAX;;AACA,QAAI,CAACE,IAAD,IAASA,IAAI,CAACZ,IAAL,KAAc,MAA3B,EAAmC;AACjC;AACAY,MAAAA,IAAI,GAAGiD,IAAI,EAAX,CAFiC,CAGjC;;AACAjD,MAAAA,IAAI,CAACS,QAAL,GAAgB;AACdC,QAAAA,KAAK,EAAEC,KAAK,CAACmB,KAAK,CAACpB,KAAP;AADE,OAAhB,CAJiC,CAOjC;;AACAqB,MAAAA,IAAI,CAAC1C,QAAL,CAAcU,IAAd,CAAmBC,IAAnB;AACD;;AACD,SAAKT,KAAL,CAAWQ,IAAX,CAAgBC,IAAhB;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAASrD,UAAT,CAAoBmF,KAApB,EAA2B;AACzB,UAAM9B,IAAI,GAAG,KAAKT,KAAL,CAAWU,GAAX,EAAb;AACAD,IAAAA,IAAI,CAAC3H,KAAL,IAAc,KAAKkI,cAAL,CAAoBuB,KAApB,CAAd;AACA9B,IAAAA,IAAI,CAACS,QAAL,CAAcM,GAAd,GAAoBJ,KAAK,CAACmB,KAAK,CAACf,GAAP,CAAzB;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAAS5C,gBAAT,CAA0B2D,KAA1B,EAAiC;AAC/B,UAAMxC,OAAO,GAAG,KAAKC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAhB,CAD+B,CAE/B;;AACA,QAAIH,OAAO,CAAC,aAAD,CAAX,EAA4B;AAC1B,YAAMK,IAAI,GAAGV,OAAO,CAACD,QAAR,CAAiBC,OAAO,CAACD,QAAR,CAAiBS,MAAjB,GAA0B,CAA3C,CAAb;AACAE,MAAAA,IAAI,CAACS,QAAL,CAAcM,GAAd,GAAoBJ,KAAK,CAACmB,KAAK,CAACf,GAAP,CAAzB;AACArB,MAAAA,OAAO,CAAC,aAAD,CAAP;AACA;AACD;;AACD,QACE,CAACC,OAAO,CAAC,8BAAD,CAAR,IACA/G,MAAM,CAACE,cAAP,CAAsBoK,QAAtB,CAA+B5D,OAAO,CAACF,IAAvC,CAFF,EAGE;AACAhG,MAAAA,WAAW,CAACgH,IAAZ,CAAiB,IAAjB,EAAuB0B,KAAvB;AACAnF,MAAAA,UAAU,CAACyD,IAAX,CAAgB,IAAhB,EAAsB0B,KAAtB;AACD;AACF;AAED;AACF;AACA;AACA;;;AAEE,WAASnE,eAAT,GAA2B;AACzB+B,IAAAA,OAAO,CAAC,aAAD,EAAgB,IAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAAS9B,cAAT,GAA0B;AACxB,UAAMzD,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAAC1J,KAAL,GAAa8B,IAAb;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAAS0D,cAAT,GAA0B;AACxB,UAAM1D,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAAC1J,KAAL,GAAa8B,IAAb;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAASoD,cAAT,GAA0B;AACxB,UAAMpD,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAAC1J,KAAL,GAAa8B,IAAb;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAASiE,UAAT,GAAsB;AACpB,UAAM2D,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb,CADoB,CAEpB;AACA;AAEA;;AACA,QAAIH,OAAO,CAAC,aAAD,CAAX,EAA4B;AAC1B;AACA,YAAMwD,aAAa,GAAGxD,OAAO,CAAC,eAAD,CAAP,IAA4B,UAAlD;AACAoC,MAAAA,IAAI,CAAC3C,IAAL,IAAa,WAAb,CAH0B,CAI1B;;AACA2C,MAAAA,IAAI,CAACoB,aAAL,GAAqBA,aAArB,CAL0B,CAM1B;;AACA,aAAOpB,IAAI,CAACe,GAAZ;AACA,aAAOf,IAAI,CAACc,KAAZ;AACD,KATD,MASO;AACL;AACA,aAAOd,IAAI,CAACY,UAAZ,CAFK,CAGL;;AACA,aAAOZ,IAAI,CAAC5G,KAAZ;AACD;;AACDuE,IAAAA,OAAO,CAAC,eAAD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAAS5B,WAAT,GAAuB;AACrB,UAAMiE,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb,CADqB,CAErB;AACA;AAEA;;AACA,QAAIH,OAAO,CAAC,aAAD,CAAX,EAA4B;AAC1B;AACA,YAAMwD,aAAa,GAAGxD,OAAO,CAAC,eAAD,CAAP,IAA4B,UAAlD;AACAoC,MAAAA,IAAI,CAAC3C,IAAL,IAAa,WAAb,CAH0B,CAI1B;;AACA2C,MAAAA,IAAI,CAACoB,aAAL,GAAqBA,aAArB,CAL0B,CAM1B;;AACA,aAAOpB,IAAI,CAACe,GAAZ;AACA,aAAOf,IAAI,CAACc,KAAZ;AACD,KATD,MASO;AACL;AACA,aAAOd,IAAI,CAACY,UAAZ,CAFK,CAGL;;AACA,aAAOZ,IAAI,CAAC5G,KAAZ;AACD;;AACDuE,IAAAA,OAAO,CAAC,eAAD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAASzB,eAAT,CAAyB6D,KAAzB,EAAgC;AAC9B,UAAMsB,MAAM,GAAG,KAAK7C,cAAL,CAAoBuB,KAApB,CAAf;AACA,UAAMO,QAAQ,GAAG,KAAK9C,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAjB,CAF8B,CAG9B;AACA;;AACAuC,IAAAA,QAAQ,CAAClH,KAAT,GAAiBrD,YAAY,CAACsL,MAAD,CAA7B,CAL8B,CAM9B;;AACAf,IAAAA,QAAQ,CAACM,UAAT,GAAsB5K,mBAAmB,CAACqL,MAAD,CAAnB,CAA4BR,WAA5B,EAAtB;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAAS7E,WAAT,GAAuB;AACrB,UAAMsF,QAAQ,GAAG,KAAK9D,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAjB;AACA,UAAMzH,KAAK,GAAG,KAAKoH,MAAL,EAAd;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb,CAHqB,CAIrB;;AACAJ,IAAAA,OAAO,CAAC,aAAD,EAAgB,IAAhB,CAAP;;AACA,QAAIqC,IAAI,CAAC3C,IAAL,KAAc,MAAlB,EAA0B;AACxB;AACA;AACA,YAAMC,QAAQ,GAAGgE,QAAQ,CAAChE,QAA1B;AACA0C,MAAAA,IAAI,CAAC1C,QAAL,GAAgBA,QAAhB;AACD,KALD,MAKO;AACL0C,MAAAA,IAAI,CAACuB,GAAL,GAAWjL,KAAX;AACD;AACF;AAED;AACF;AACA;AACA;;;AAEE,WAASiG,+BAAT,GAA2C;AACzC,UAAMnE,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAACe,GAAL,GAAW3I,IAAX;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAASoE,yBAAT,GAAqC;AACnC,UAAMpE,IAAI,GAAG,KAAKsF,MAAL,EAAb;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAACc,KAAL,GAAa1I,IAAb;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAASsE,cAAT,GAA0B;AACxBiB,IAAAA,OAAO,CAAC,aAAD,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAAS7D,gBAAT,GAA4B;AAC1B6D,IAAAA,OAAO,CAAC,eAAD,EAAkB,WAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAASrB,qBAAT,CAA+ByD,KAA/B,EAAsC;AACpC,UAAM3G,KAAK,GAAG,KAAKsE,MAAL,EAAd;AACA,UAAMsC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb,CAFoC,CAGpC;AACA;;AACAiC,IAAAA,IAAI,CAAC5G,KAAL,GAAaA,KAAb,CALoC,CAMpC;;AACA4G,IAAAA,IAAI,CAACY,UAAL,GAAkB5K,mBAAmB,CACnC,KAAKwI,cAAL,CAAoBuB,KAApB,CADmC,CAAnB,CAEhBc,WAFgB,EAAlB;AAGAlD,IAAAA,OAAO,CAAC,eAAD,EAAkB,MAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AAEE,WAAS7C,8BAAT,CAAwCiF,KAAxC,EAA+C;AAC7CpC,IAAAA,OAAO,CAAC,wBAAD,EAA2BoC,KAAK,CAAC1C,IAAjC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASpC,6BAAT,CAAuC8E,KAAvC,EAA8C;AAC5C,UAAM3H,IAAI,GAAG,KAAKoG,cAAL,CAAoBuB,KAApB,CAAb;AACA,UAAM1C,IAAI,GAAGO,OAAO,CAAC,wBAAD,CAApB;AACA;;AACA,QAAItH,KAAJ;;AACA,QAAI+G,IAAJ,EAAU;AACR/G,MAAAA,KAAK,GAAGR,+BAA+B,CACrCsC,IADqC,EAErCiF,IAAI,KAAK,iCAAT,GAA6C,EAA7C,GAAkD,EAFb,CAAvC;AAIAM,MAAAA,OAAO,CAAC,wBAAD,CAAP;AACD,KAND,MAMO;AACL,YAAM6D,MAAM,GAAGvL,6BAA6B,CAACmC,IAAD,CAA5C;AACA9B,MAAAA,KAAK,GAAGkL,MAAR;AACD;;AACD,UAAMvD,IAAI,GAAG,KAAKT,KAAL,CAAWU,GAAX,EAAb;AACAD,IAAAA,IAAI,CAAC3H,KAAL,IAAcA,KAAd;AACA2H,IAAAA,IAAI,CAACS,QAAL,CAAcM,GAAd,GAAoBJ,KAAK,CAACmB,KAAK,CAACf,GAAP,CAAzB;AACD;AAED;AACF;AACA;AACA;;;AACE,WAAStE,sBAAT,CAAgCqF,KAAhC,EAAuC;AACrCnF,IAAAA,UAAU,CAACyD,IAAX,CAAgB,IAAhB,EAAsB0B,KAAtB;AACA,UAAMC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAACe,GAAL,GAAW,KAAKvC,cAAL,CAAoBuB,KAApB,CAAX;AACD;AAED;AACF;AACA;AACA;;;AACE,WAAStF,mBAAT,CAA6BsF,KAA7B,EAAoC;AAClCnF,IAAAA,UAAU,CAACyD,IAAX,CAAgB,IAAhB,EAAsB0B,KAAtB;AACA,UAAMC,IAAI,GAAG,KAAKxC,KAAL,CAAW,KAAKA,KAAL,CAAWO,MAAX,GAAoB,CAA/B,CAAb;AACAiC,IAAAA,IAAI,CAACe,GAAL,GAAW,YAAY,KAAKvC,cAAL,CAAoBuB,KAApB,CAAvB;AACD,GA16BwB,CA46BzB;AACA;AACA;;AAEA;;;AACA,WAAStI,UAAT,GAAsB;AACpB,WAAO;AACL4F,MAAAA,IAAI,EAAE,YADD;AAELC,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID;AAED;;;AACA,WAASzF,QAAT,GAAoB;AAClB,WAAO;AACLwF,MAAAA,IAAI,EAAE,MADD;AAELoD,MAAAA,IAAI,EAAE,IAFD;AAGLC,MAAAA,IAAI,EAAE,IAHD;AAILpK,MAAAA,KAAK,EAAE;AAJF,KAAP;AAMD;AAED;;;AACA,WAAS4B,QAAT,GAAoB;AAClB,WAAO;AACLmF,MAAAA,IAAI,EAAE,YADD;AAEL/G,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;AAED;;;AACA,WAASgC,UAAT,GAAsB;AACpB,WAAO;AACL+E,MAAAA,IAAI,EAAE,YADD;AAELuD,MAAAA,UAAU,EAAE,EAFP;AAGLxH,MAAAA,KAAK,EAAE,IAHF;AAIL0H,MAAAA,KAAK,EAAE,IAJF;AAKLC,MAAAA,GAAG,EAAE;AALA,KAAP;AAOD;AAED;;;AACA,WAASrI,QAAT,GAAoB;AAClB,WAAO;AACL2E,MAAAA,IAAI,EAAE,UADD;AAELC,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID;AAED;;;AACA,WAAS9F,OAAT,GAAmB;AACjB;AACA,WAAO;AACL6F,MAAAA,IAAI,EAAE,SADD;AAEL2D,MAAAA,KAAK,EAAEvK,SAFF;AAGL6G,MAAAA,QAAQ,EAAE;AAHL,KAAP;AAKD;AAED;;;AACA,WAAS1E,SAAT,GAAqB;AACnB,WAAO;AACLyE,MAAAA,IAAI,EAAE;AADD,KAAP;AAGD;AAED;;;AACA,WAAStE,IAAT,GAAgB;AACd,WAAO;AACLsE,MAAAA,IAAI,EAAE,MADD;AAEL/G,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;AAED;;;AACA,WAAS6C,KAAT,GAAiB;AACf,WAAO;AACLkE,MAAAA,IAAI,EAAE,OADD;AAELyD,MAAAA,KAAK,EAAE,IAFF;AAGLC,MAAAA,GAAG,EAAE,EAHA;AAILQ,MAAAA,GAAG,EAAE;AAJA,KAAP;AAMD;AAED;;;AACA,WAASpK,IAAT,GAAgB;AACd,WAAO;AACLkG,MAAAA,IAAI,EAAE,MADD;AAELyD,MAAAA,KAAK,EAAE,IAFF;AAGLC,MAAAA,GAAG,EAAE,EAHA;AAILzD,MAAAA,QAAQ,EAAE;AAJL,KAAP;AAMD;AAED;AACF;AACA;AACA;;;AACE,WAAS7D,IAAT,CAAcsG,KAAd,EAAqB;AACnB,WAAO;AACL1C,MAAAA,IAAI,EAAE,MADD;AAELoE,MAAAA,OAAO,EAAE1B,KAAK,CAAC1C,IAAN,KAAe,aAFnB;AAGLsB,MAAAA,KAAK,EAAE,IAHF;AAIL;AACA+C,MAAAA,MAAM,EAAE3B,KAAK,CAACN,OALT;AAMLnC,MAAAA,QAAQ,EAAE;AANL,KAAP;AAQD;AAED;AACF;AACA;AACA;;;AACE,WAASjE,QAAT,CAAkB0G,KAAlB,EAAyB;AACvB,WAAO;AACL1C,MAAAA,IAAI,EAAE,UADD;AAEL;AACAqE,MAAAA,MAAM,EAAE3B,KAAK,CAACN,OAHT;AAILkC,MAAAA,OAAO,EAAE,IAJJ;AAKLrE,MAAAA,QAAQ,EAAE;AALL,KAAP;AAOD;AAED;;;AACA,WAAS1D,SAAT,GAAqB;AACnB,WAAO;AACLyD,MAAAA,IAAI,EAAE,WADD;AAELC,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID;AAED;;;AACA,WAASnD,MAAT,GAAkB;AAChB,WAAO;AACLkD,MAAAA,IAAI,EAAE,QADD;AAELC,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID;AAED;;;AACA,WAAS4D,IAAT,GAAgB;AACd,WAAO;AACL7D,MAAAA,IAAI,EAAE,MADD;AAEL/G,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;AAED;;;AACA,WAAS8D,aAAT,GAAyB;AACvB,WAAO;AACLiD,MAAAA,IAAI,EAAE;AADD,KAAP;AAGD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuB,KAAT,CAAegD,CAAf,EAAkB;AAChB,SAAO;AACL/C,IAAAA,IAAI,EAAE+C,CAAC,CAAC/C,IADH;AAELC,IAAAA,MAAM,EAAE8C,CAAC,CAAC9C,MAFL;AAGLC,IAAAA,MAAM,EAAE6C,CAAC,CAAC7C;AAHL,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS/B,SAAT,CAAmB6E,QAAnB,EAA6BC,UAA7B,EAAyC;AACvC,MAAIhE,KAAK,GAAG,CAAC,CAAb;;AACA,SAAO,EAAEA,KAAF,GAAUgE,UAAU,CAAC/D,MAA5B,EAAoC;AAClC,UAAMzH,KAAK,GAAGwL,UAAU,CAAChE,KAAD,CAAxB;;AACA,QAAIiE,KAAK,CAACC,OAAN,CAAc1L,KAAd,CAAJ,EAA0B;AACxB0G,MAAAA,SAAS,CAAC6E,QAAD,EAAWvL,KAAX,CAAT;AACD,KAFD,MAEO;AACL2L,MAAAA,SAAS,CAACJ,QAAD,EAAWvL,KAAX,CAAT;AACD;AACF;AACF;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS2L,SAAT,CAAmBJ,QAAnB,EAA6BI,SAA7B,EAAwC;AACtC;AACA,MAAItC,GAAJ;;AACA,OAAKA,GAAL,IAAYsC,SAAZ,EAAuB;AACrB,QAAI9L,GAAG,CAACkI,IAAJ,CAAS4D,SAAT,EAAoBtC,GAApB,CAAJ,EAA8B;AAC5B,UAAIA,GAAG,KAAK,gBAAZ,EAA8B;AAC5B,cAAMuC,KAAK,GAAGD,SAAS,CAACtC,GAAD,CAAvB;;AACA,YAAIuC,KAAJ,EAAW;AACTL,UAAAA,QAAQ,CAAClC,GAAD,CAAR,CAAc3B,IAAd,CAAmB,GAAGkE,KAAtB;AACD;AACF,OALD,MAKO,IAAIvC,GAAG,KAAK,YAAZ,EAA0B;AAC/B,cAAMuC,KAAK,GAAGD,SAAS,CAACtC,GAAD,CAAvB;;AACA,YAAIuC,KAAJ,EAAW;AACTL,UAAAA,QAAQ,CAAClC,GAAD,CAAR,CAAc3B,IAAd,CAAmB,GAAGkE,KAAtB;AACD;AACF,OALM,MAKA,IAAIvC,GAAG,KAAK,OAAR,IAAmBA,GAAG,KAAK,MAA/B,EAAuC;AAC5C,cAAMuC,KAAK,GAAGD,SAAS,CAACtC,GAAD,CAAvB;;AACA,YAAIuC,KAAJ,EAAW;AACT5D,UAAAA,MAAM,CAACC,MAAP,CAAcsD,QAAQ,CAAClC,GAAD,CAAtB,EAA6BuC,KAA7B;AACD;AACF;AACF;AACF;AACF;AAED;;;AACA,SAASzD,cAAT,CAAwB0D,IAAxB,EAA8BD,KAA9B,EAAqC;AACnC,MAAIC,IAAJ,EAAU;AACR,UAAM,IAAI9B,KAAJ,CACJ,mBACE8B,IAAI,CAAC9E,IADP,GAEE,KAFF,GAGEnH,iBAAiB,CAAC;AAChByI,MAAAA,KAAK,EAAEwD,IAAI,CAACxD,KADI;AAEhBK,MAAAA,GAAG,EAAEmD,IAAI,CAACnD;AAFM,KAAD,CAHnB,GAOE,yBAPF,GAQEkD,KAAK,CAAC7E,IARR,GASE,KATF,GAUEnH,iBAAiB,CAAC;AAChByI,MAAAA,KAAK,EAAEuD,KAAK,CAACvD,KADG;AAEhBK,MAAAA,GAAG,EAAEkD,KAAK,CAAClD;AAFK,KAAD,CAVnB,GAcE,WAfE,CAAN;AAiBD,GAlBD,MAkBO;AACL,UAAM,IAAIqB,KAAJ,CACJ,sCACE6B,KAAK,CAAC7E,IADR,GAEE,KAFF,GAGEnH,iBAAiB,CAAC;AAChByI,MAAAA,KAAK,EAAEuD,KAAK,CAACvD,KADG;AAEhBK,MAAAA,GAAG,EAAEkD,KAAK,CAAClD;AAFK,KAAD,CAHnB,GAOE,iBARE,CAAN;AAUD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}