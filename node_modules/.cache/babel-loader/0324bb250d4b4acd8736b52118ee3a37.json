{"ast":null,"code":"/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'br',\n    properties: {},\n    children: []\n  };\n  state.patch(node, result);\n  return [state.applyData(node, result), {\n    type: 'text',\n    value: '\\n'\n  }];\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/mdast-util-to-hast/lib/handlers/break.js"],"names":["hardBreak","state","node","result","type","tagName","properties","children","patch","applyData","value"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgC;AACrC;AACA,QAAMC,MAAM,GAAG;AAACC,IAAAA,IAAI,EAAE,SAAP;AAAkBC,IAAAA,OAAO,EAAE,IAA3B;AAAiCC,IAAAA,UAAU,EAAE,EAA7C;AAAiDC,IAAAA,QAAQ,EAAE;AAA3D,GAAf;AACAN,EAAAA,KAAK,CAACO,KAAN,CAAYN,IAAZ,EAAkBC,MAAlB;AACA,SAAO,CAACF,KAAK,CAACQ,SAAN,CAAgBP,IAAhB,EAAsBC,MAAtB,CAAD,EAAgC;AAACC,IAAAA,IAAI,EAAE,MAAP;AAAeM,IAAAA,KAAK,EAAE;AAAtB,GAAhC,CAAP;AACD","sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n"]},"metadata":{},"sourceType":"module"}