{"ast":null,"code":"/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = [];\n  const input = String(value || '');\n  let index = input.indexOf(',');\n  let start = 0;\n  /** @type {boolean} */\n\n  let end = false;\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length;\n      end = true;\n    }\n\n    const token = input.slice(start, index).trim();\n\n    if (token || !end) {\n      tokens.push(token);\n    }\n\n    start = index + 1;\n    index = input.indexOf(',', start);\n  }\n\n  return tokens;\n}\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\n\nexport function stringify(values, options) {\n  const settings = options || {}; // Ensure the last empty entry is seen.\n\n  const input = values[values.length - 1] === '' ? [...values, ''] : values;\n  return input.join((settings.padRight ? ' ' : '') + ',' + (settings.padLeft === false ? '' : ' ')).trim();\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/comma-separated-tokens/index.js"],"names":["parse","value","tokens","input","String","index","indexOf","start","end","length","token","slice","trim","push","stringify","values","options","settings","join","padRight","padLeft"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAC3B;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACH,KAAK,IAAI,EAAV,CAApB;AACA,MAAII,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAc,GAAd,CAAZ;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA;;AACA,MAAIC,GAAG,GAAG,KAAV;;AAEA,SAAO,CAACA,GAAR,EAAa;AACX,QAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBA,MAAAA,KAAK,GAAGF,KAAK,CAACM,MAAd;AACAD,MAAAA,GAAG,GAAG,IAAN;AACD;;AAED,UAAME,KAAK,GAAGP,KAAK,CAACQ,KAAN,CAAYJ,KAAZ,EAAmBF,KAAnB,EAA0BO,IAA1B,EAAd;;AAEA,QAAIF,KAAK,IAAI,CAACF,GAAd,EAAmB;AACjBN,MAAAA,MAAM,CAACW,IAAP,CAAYH,KAAZ;AACD;;AAEDH,IAAAA,KAAK,GAAGF,KAAK,GAAG,CAAhB;AACAA,IAAAA,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAc,GAAd,EAAmBC,KAAnB,CAAR;AACD;;AAED,SAAOL,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASY,SAAT,CAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AACzC,QAAMC,QAAQ,GAAGD,OAAO,IAAI,EAA5B,CADyC,CAGzC;;AACA,QAAMb,KAAK,GAAGY,MAAM,CAACA,MAAM,CAACN,MAAP,GAAgB,CAAjB,CAAN,KAA8B,EAA9B,GAAmC,CAAC,GAAGM,MAAJ,EAAY,EAAZ,CAAnC,GAAqDA,MAAnE;AAEA,SAAOZ,KAAK,CACTe,IADI,CAEH,CAACD,QAAQ,CAACE,QAAT,GAAoB,GAApB,GAA0B,EAA3B,IACE,GADF,IAEGF,QAAQ,CAACG,OAAT,KAAqB,KAArB,GAA6B,EAA7B,GAAkC,GAFrC,CAFG,EAMJR,IANI,EAAP;AAOD","sourcesContent":["/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n"]},"metadata":{},"sourceType":"module"}