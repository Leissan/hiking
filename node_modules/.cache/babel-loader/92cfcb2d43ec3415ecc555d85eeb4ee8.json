{"ast":null,"code":"/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {\n    type: 'text',\n    value: node.value.replace(/\\r?\\n|\\r/g, ' ')\n  };\n  state.patch(node, text);\n  /** @type {Element} */\n\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js"],"names":["inlineCode","state","node","text","type","value","replace","patch","result","tagName","properties","children","applyData"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,IAA3B,EAAiC;AACtC;AACA,QAAMC,IAAI,GAAG;AAACC,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAAL,CAAWC,OAAX,CAAmB,WAAnB,EAAgC,GAAhC;AAAtB,GAAb;AACAL,EAAAA,KAAK,CAACM,KAAN,CAAYL,IAAZ,EAAkBC,IAAlB;AAEA;;AACA,QAAMK,MAAM,GAAG;AACbJ,IAAAA,IAAI,EAAE,SADO;AAEbK,IAAAA,OAAO,EAAE,MAFI;AAGbC,IAAAA,UAAU,EAAE,EAHC;AAIbC,IAAAA,QAAQ,EAAE,CAACR,IAAD;AAJG,GAAf;AAMAF,EAAAA,KAAK,CAACM,KAAN,CAAYL,IAAZ,EAAkBM,MAAlB;AACA,SAAOP,KAAK,CAACW,SAAN,CAAgBV,IAAhB,EAAsBM,MAAtB,CAAP;AACD","sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n"]},"metadata":{},"sourceType":"module"}