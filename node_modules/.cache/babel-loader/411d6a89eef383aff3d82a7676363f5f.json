{"ast":null,"code":"/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\nimport { normalizeUri } from 'micromark-util-sanitize-uri';\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\n\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase();\n  const safeId = normalizeUri(id.toLowerCase());\n  const index = state.footnoteOrder.indexOf(id);\n  /** @type {number} */\n\n  let counter;\n\n  if (index === -1) {\n    state.footnoteOrder.push(id);\n    state.footnoteCounts[id] = 1;\n    counter = state.footnoteOrder.length;\n  } else {\n    state.footnoteCounts[id]++;\n    counter = index + 1;\n  }\n\n  const reuseCounter = state.footnoteCounts[id];\n  /** @type {Element} */\n\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id: state.clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{\n      type: 'text',\n      value: String(counter)\n    }]\n  };\n  state.patch(node, link);\n  /** @type {Element} */\n\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  };\n  state.patch(node, sup);\n  return state.applyData(node, sup);\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js"],"names":["normalizeUri","footnoteReference","state","node","id","String","identifier","toUpperCase","safeId","toLowerCase","index","footnoteOrder","indexOf","counter","push","footnoteCounts","length","reuseCounter","link","type","tagName","properties","href","clobberPrefix","dataFootnoteRef","ariaDescribedBy","children","value","patch","sup","applyData"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,YAAR,QAA2B,6BAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAC7C,QAAMC,EAAE,GAAGC,MAAM,CAACF,IAAI,CAACG,UAAN,CAAN,CAAwBC,WAAxB,EAAX;AACA,QAAMC,MAAM,GAAGR,YAAY,CAACI,EAAE,CAACK,WAAH,EAAD,CAA3B;AACA,QAAMC,KAAK,GAAGR,KAAK,CAACS,aAAN,CAAoBC,OAApB,CAA4BR,EAA5B,CAAd;AACA;;AACA,MAAIS,OAAJ;;AAEA,MAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBR,IAAAA,KAAK,CAACS,aAAN,CAAoBG,IAApB,CAAyBV,EAAzB;AACAF,IAAAA,KAAK,CAACa,cAAN,CAAqBX,EAArB,IAA2B,CAA3B;AACAS,IAAAA,OAAO,GAAGX,KAAK,CAACS,aAAN,CAAoBK,MAA9B;AACD,GAJD,MAIO;AACLd,IAAAA,KAAK,CAACa,cAAN,CAAqBX,EAArB;AACAS,IAAAA,OAAO,GAAGH,KAAK,GAAG,CAAlB;AACD;;AAED,QAAMO,YAAY,GAAGf,KAAK,CAACa,cAAN,CAAqBX,EAArB,CAArB;AAEA;;AACA,QAAMc,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAE,SADK;AAEXC,IAAAA,OAAO,EAAE,GAFE;AAGXC,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE,MAAMpB,KAAK,CAACqB,aAAZ,GAA4B,KAA5B,GAAoCf,MADhC;AAEVJ,MAAAA,EAAE,EACAF,KAAK,CAACqB,aAAN,GACA,QADA,GAEAf,MAFA,IAGCS,YAAY,GAAG,CAAf,GAAmB,MAAMA,YAAzB,GAAwC,EAHzC,CAHQ;AAOVO,MAAAA,eAAe,EAAE,IAPP;AAQVC,MAAAA,eAAe,EAAE,CAAC,gBAAD;AARP,KAHD;AAaXC,IAAAA,QAAQ,EAAE,CAAC;AAACP,MAAAA,IAAI,EAAE,MAAP;AAAeQ,MAAAA,KAAK,EAAEtB,MAAM,CAACQ,OAAD;AAA5B,KAAD;AAbC,GAAb;AAeAX,EAAAA,KAAK,CAAC0B,KAAN,CAAYzB,IAAZ,EAAkBe,IAAlB;AAEA;;AACA,QAAMW,GAAG,GAAG;AACVV,IAAAA,IAAI,EAAE,SADI;AAEVC,IAAAA,OAAO,EAAE,KAFC;AAGVC,IAAAA,UAAU,EAAE,EAHF;AAIVK,IAAAA,QAAQ,EAAE,CAACR,IAAD;AAJA,GAAZ;AAMAhB,EAAAA,KAAK,CAAC0B,KAAN,CAAYzB,IAAZ,EAAkB0B,GAAlB;AACA,SAAO3B,KAAK,CAAC4B,SAAN,CAAgB3B,IAAhB,EAAsB0B,GAAtB,CAAP;AACD","sourcesContent":["/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n"]},"metadata":{},"sourceType":"module"}