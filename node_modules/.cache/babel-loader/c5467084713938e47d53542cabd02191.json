{"ast":null,"code":"/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n};","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/property-information/lib/hast-to-react.js"],"names":["hastToReact","classId","dataType","itemId","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","typeOf","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlnsXLink"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,GAAG;AACzBC,EAAAA,OAAO,EAAE,SADgB;AAEzBC,EAAAA,QAAQ,EAAE,UAFe;AAGzBC,EAAAA,MAAM,EAAE,QAHiB;AAIzBC,EAAAA,eAAe,EAAE,iBAJQ;AAKzBC,EAAAA,gBAAgB,EAAE,kBALO;AAMzBC,EAAAA,aAAa,EAAE,eANU;AAOzBC,EAAAA,cAAc,EAAE,gBAPS;AAQzBC,EAAAA,gBAAgB,EAAE,kBARO;AASzBC,EAAAA,MAAM,EAAE,QATiB;AAUzBC,EAAAA,YAAY,EAAE,cAVW;AAWzBC,EAAAA,YAAY,EAAE,cAXW;AAYzBC,EAAAA,SAAS,EAAE,WAZc;AAazBC,EAAAA,SAAS,EAAE,WAbc;AAczBC,EAAAA,SAAS,EAAE,WAdc;AAezBC,EAAAA,UAAU,EAAE,YAfa;AAgBzBC,EAAAA,SAAS,EAAE,WAhBc;AAiBzBC,EAAAA,UAAU,EAAE;AAjBa,CAApB","sourcesContent":["/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n"]},"metadata":{},"sourceType":"module"}