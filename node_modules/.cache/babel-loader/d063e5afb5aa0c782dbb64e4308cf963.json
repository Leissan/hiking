{"ast":null,"code":"/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {};\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\n\nexport function toString(value, options) {\n  const settings = options || emptyOptions;\n  const includeImageAlt = typeof settings.includeImageAlt === 'boolean' ? settings.includeImageAlt : true;\n  const includeHtml = typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;\n  return one(value, includeImageAlt, includeHtml);\n}\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\n\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value;\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt;\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml);\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml);\n  }\n\n  return '';\n}\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\n\n\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml);\n  }\n\n  return result.join('');\n}\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\n\n\nfunction node(value) {\n  return Boolean(value && typeof value === 'object');\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/mdast-util-to-string/lib/index.js"],"names":["emptyOptions","toString","value","options","settings","includeImageAlt","includeHtml","one","node","type","alt","all","children","Array","isArray","values","result","index","length","join","Boolean"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAG,EAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,OAAzB,EAAkC;AACvC,QAAMC,QAAQ,GAAGD,OAAO,IAAIH,YAA5B;AACA,QAAMK,eAAe,GACnB,OAAOD,QAAQ,CAACC,eAAhB,KAAoC,SAApC,GACID,QAAQ,CAACC,eADb,GAEI,IAHN;AAIA,QAAMC,WAAW,GACf,OAAOF,QAAQ,CAACE,WAAhB,KAAgC,SAAhC,GAA4CF,QAAQ,CAACE,WAArD,GAAmE,IADrE;AAGA,SAAOC,GAAG,CAACL,KAAD,EAAQG,eAAR,EAAyBC,WAAzB,CAAV;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,GAAT,CAAaL,KAAb,EAAoBG,eAApB,EAAqCC,WAArC,EAAkD;AAChD,MAAIE,IAAI,CAACN,KAAD,CAAR,EAAiB;AACf,QAAI,WAAWA,KAAf,EAAsB;AACpB,aAAOA,KAAK,CAACO,IAAN,KAAe,MAAf,IAAyB,CAACH,WAA1B,GAAwC,EAAxC,GAA6CJ,KAAK,CAACA,KAA1D;AACD;;AAED,QAAIG,eAAe,IAAI,SAASH,KAA5B,IAAqCA,KAAK,CAACQ,GAA/C,EAAoD;AAClD,aAAOR,KAAK,CAACQ,GAAb;AACD;;AAED,QAAI,cAAcR,KAAlB,EAAyB;AACvB,aAAOS,GAAG,CAACT,KAAK,CAACU,QAAP,EAAiBP,eAAjB,EAAkCC,WAAlC,CAAV;AACD;AACF;;AAED,MAAIO,KAAK,CAACC,OAAN,CAAcZ,KAAd,CAAJ,EAA0B;AACxB,WAAOS,GAAG,CAACT,KAAD,EAAQG,eAAR,EAAyBC,WAAzB,CAAV;AACD;;AAED,SAAO,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,GAAT,CAAaI,MAAb,EAAqBV,eAArB,EAAsCC,WAAtC,EAAmD;AACjD;AACA,QAAMU,MAAM,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUF,MAAM,CAACG,MAAxB,EAAgC;AAC9BF,IAAAA,MAAM,CAACC,KAAD,CAAN,GAAgBV,GAAG,CAACQ,MAAM,CAACE,KAAD,CAAP,EAAgBZ,eAAhB,EAAiCC,WAAjC,CAAnB;AACD;;AAED,SAAOU,MAAM,CAACG,IAAP,CAAY,EAAZ,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASX,IAAT,CAAcN,KAAd,EAAqB;AACnB,SAAOkB,OAAO,CAAClB,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA3B,CAAd;AACD","sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n"]},"metadata":{},"sourceType":"module"}