{"ast":null,"code":"/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\nimport { footnoteReference } from './footnote-reference.js'; // To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\n\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById;\n  let no = 1;\n\n  while (no in footnoteById) no++;\n\n  const identifier = String(no);\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{\n      type: 'paragraph',\n      children: node.children\n    }],\n    position: node.position\n  };\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  });\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/mdast-util-to-hast/lib/handlers/footnote.js"],"names":["footnoteReference","footnote","state","node","footnoteById","no","identifier","String","type","children","position"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,yBAAhC,C,CAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AACpC,QAAMC,YAAY,GAAGF,KAAK,CAACE,YAA3B;AACA,MAAIC,EAAE,GAAG,CAAT;;AAEA,SAAOA,EAAE,IAAID,YAAb,EAA2BC,EAAE;;AAE7B,QAAMC,UAAU,GAAGC,MAAM,CAACF,EAAD,CAAzB;AAEAD,EAAAA,YAAY,CAACE,UAAD,CAAZ,GAA2B;AACzBE,IAAAA,IAAI,EAAE,oBADmB;AAEzBF,IAAAA,UAFyB;AAGzBG,IAAAA,QAAQ,EAAE,CAAC;AAACD,MAAAA,IAAI,EAAE,WAAP;AAAoBC,MAAAA,QAAQ,EAAEN,IAAI,CAACM;AAAnC,KAAD,CAHe;AAIzBC,IAAAA,QAAQ,EAAEP,IAAI,CAACO;AAJU,GAA3B;AAOA,SAAOV,iBAAiB,CAACE,KAAD,EAAQ;AAC9BM,IAAAA,IAAI,EAAE,mBADwB;AAE9BF,IAAAA,UAF8B;AAG9BI,IAAAA,QAAQ,EAAEP,IAAI,CAACO;AAHe,GAAR,CAAxB;AAKD","sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n"]},"metadata":{},"sourceType":"module"}