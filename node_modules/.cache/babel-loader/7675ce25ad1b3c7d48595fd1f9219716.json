{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter('blockQuotePrefix');\n      effects.enter('blockQuoteMarker');\n      effects.consume(code);\n      effects.exit('blockQuoteMarker');\n      return after;\n    }\n    return nok(code);\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace');\n      effects.consume(code);\n      effects.exit('blockQuotePrefixWhitespace');\n      effects.exit('blockQuotePrefix');\n      return ok;\n    }\n    effects.exit('blockQuotePrefix');\n    return ok(code);\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(effects, effects.attempt(blockQuote, ok, nok), 'linePrefix', this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote');\n}","map":{"version":3,"names":["factorySpace","markdownSpace","blockQuote","name","tokenize","tokenizeBlockQuoteStart","continuation","tokenizeBlockQuoteContinuation","exit","effects","ok","nok","self","start","code","state","containerState","open","enter","_container","consume","after","attempt","parser","constructs","disable","null","includes","undefined"],"sources":["/home/leissan/Development/hiking/client/node_modules/micromark-core-commonmark/lib/block-quote.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,YAAY,QAAO,yBAAyB;AACpD,SAAQC,aAAa,QAAO,0BAA0B;;AAEtD;AACA,OAAO,MAAMC,UAAU,GAAG;EACxBC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAEC,uBAAuB;EACjCC,YAAY,EAAE;IACZF,QAAQ,EAAEG;EACZ,CAAC;EACDC;AACF,CAAC;AACD;;AAEA,SAASH,uBAAuBA,CAACI,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACjD,MAAMC,IAAI,GAAG,IAAI;EACjB,OAAOC,KAAK;EACZ;;EAEA,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnB,IAAIA,IAAI,KAAK,EAAE,EAAE;MACf,MAAMC,KAAK,GAAGH,IAAI,CAACI,cAAc;MAEjC,IAAI,CAACD,KAAK,CAACE,IAAI,EAAE;QACfR,OAAO,CAACS,KAAK,CAAC,YAAY,EAAE;UAC1BC,UAAU,EAAE;QACd,CAAC,CAAC;QACFJ,KAAK,CAACE,IAAI,GAAG,IAAI;MACnB;MAEAR,OAAO,CAACS,KAAK,CAAC,kBAAkB,CAAC;MACjCT,OAAO,CAACS,KAAK,CAAC,kBAAkB,CAAC;MACjCT,OAAO,CAACW,OAAO,CAACN,IAAI,CAAC;MACrBL,OAAO,CAACD,IAAI,CAAC,kBAAkB,CAAC;MAChC,OAAOa,KAAK;IACd;IAEA,OAAOV,GAAG,CAACG,IAAI,CAAC;EAClB;EACA;;EAEA,SAASO,KAAKA,CAACP,IAAI,EAAE;IACnB,IAAIb,aAAa,CAACa,IAAI,CAAC,EAAE;MACvBL,OAAO,CAACS,KAAK,CAAC,4BAA4B,CAAC;MAC3CT,OAAO,CAACW,OAAO,CAACN,IAAI,CAAC;MACrBL,OAAO,CAACD,IAAI,CAAC,4BAA4B,CAAC;MAC1CC,OAAO,CAACD,IAAI,CAAC,kBAAkB,CAAC;MAChC,OAAOE,EAAE;IACX;IAEAD,OAAO,CAACD,IAAI,CAAC,kBAAkB,CAAC;IAChC,OAAOE,EAAE,CAACI,IAAI,CAAC;EACjB;AACF;AACA;;AAEA,SAASP,8BAA8BA,CAACE,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACxD,OAAOX,YAAY,CACjBS,OAAO,EACPA,OAAO,CAACa,OAAO,CAACpB,UAAU,EAAEQ,EAAE,EAAEC,GAAG,CAAC,EACpC,YAAY,EACZ,IAAI,CAACY,MAAM,CAACC,UAAU,CAACC,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,cAAc,CAAC,GAAGC,SAAS,GAAG,CAC7E,CAAC;AACH;AACA;;AAEA,SAASpB,IAAIA,CAACC,OAAO,EAAE;EACrBA,OAAO,CAACD,IAAI,CAAC,YAAY,CAAC;AAC5B"},"metadata":{},"sourceType":"module"}