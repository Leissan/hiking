{"ast":null,"code":"/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\nimport { normalizeUri } from 'micromark-util-sanitize-uri';\nimport { revert } from '../revert.js';\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\n\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier);\n\n  if (!def) {\n    return revert(state, node);\n  }\n  /** @type {Properties} */\n\n\n  const properties = {\n    src: normalizeUri(def.url || ''),\n    alt: node.alt\n  };\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title;\n  }\n  /** @type {Element} */\n\n\n  const result = {\n    type: 'element',\n    tagName: 'img',\n    properties,\n    children: []\n  };\n  state.patch(node, result);\n  return state.applyData(node, result);\n}","map":{"version":3,"sources":["/home/leissan/Development/hiking/client/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js"],"names":["normalizeUri","revert","imageReference","state","node","def","definition","identifier","properties","src","url","alt","title","undefined","result","type","tagName","children","patch","applyData"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,YAAR,QAA2B,6BAA3B;AACA,SAAQC,MAAR,QAAqB,cAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqC;AAC1C,QAAMC,GAAG,GAAGF,KAAK,CAACG,UAAN,CAAiBF,IAAI,CAACG,UAAtB,CAAZ;;AAEA,MAAI,CAACF,GAAL,EAAU;AACR,WAAOJ,MAAM,CAACE,KAAD,EAAQC,IAAR,CAAb;AACD;AAED;;;AACA,QAAMI,UAAU,GAAG;AAACC,IAAAA,GAAG,EAAET,YAAY,CAACK,GAAG,CAACK,GAAJ,IAAW,EAAZ,CAAlB;AAAmCC,IAAAA,GAAG,EAAEP,IAAI,CAACO;AAA7C,GAAnB;;AAEA,MAAIN,GAAG,CAACO,KAAJ,KAAc,IAAd,IAAsBP,GAAG,CAACO,KAAJ,KAAcC,SAAxC,EAAmD;AACjDL,IAAAA,UAAU,CAACI,KAAX,GAAmBP,GAAG,CAACO,KAAvB;AACD;AAED;;;AACA,QAAME,MAAM,GAAG;AAACC,IAAAA,IAAI,EAAE,SAAP;AAAkBC,IAAAA,OAAO,EAAE,KAA3B;AAAkCR,IAAAA,UAAlC;AAA8CS,IAAAA,QAAQ,EAAE;AAAxD,GAAf;AACAd,EAAAA,KAAK,CAACe,KAAN,CAAYd,IAAZ,EAAkBU,MAAlB;AACA,SAAOX,KAAK,CAACgB,SAAN,CAAgBf,IAAhB,EAAsBU,MAAtB,CAAP;AACD","sourcesContent":["/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n"]},"metadata":{},"sourceType":"module"}